apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: ${name}-nodepool
spec:
  limits:
    memory: "1000Gi"
  template:
    metadata:
      labels:
        server: ${name}
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ${jsonencode(karpenter_arch_choices)}
        - key: karpenter.k8s.aws/instance-cpu
          operator: In
          values: ${jsonencode(karpenter_instance_cpu_choices)}
        - key: karpenter.sh/capacity-type
          operator: In
          values: ${jsonencode(karpenter_capacity_type_choices)}
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ${jsonencode(karpenter_instance_category_choices)}
        - key: topology.kubernetes.io/zone
          operator: In
          values: ${jsonencode(karpenter_instance_az)}
        - key: "karpenter.k8s.aws/instance-generation"
          operator: Gt
          values: [ "4" ]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: ${name}
      kubelet:
        containerRuntime: containerd
        systemReserved:
          cpu: 100m
          memory: 100Mi
      tolerations:
        - key: server
          value: ${name}
          effect: "NoSchedule"
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m
